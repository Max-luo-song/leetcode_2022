/*
    算法思想：整体思路同123（本题是买卖K次，123是买卖两次）
    保持2k+1个状态，一次递归处理。分三种情况1.不吃处理 2.卖掉上一个(max) 3.本次买一个(max)
*/
class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        if (prices.size() == 0)
            return 0;
        vector<vector<int>> dp(prices.size(), vector<int>(2*k+1, 0));
        for (int i=1; i<=2*k; i+=2) {
            dp[0][i] = -prices[0];
        }
        for (int i=1; i<prices.size(); i++) {
            for (int j=0; j<=2*k; j++) {
                if (j == 0)
                    dp[i][j] = dp[i-1][j];
                else if (j % 2 == 1)
                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]-prices[i]);
                else
                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]+prices[i]);
            }

        }
        return dp[prices.size()-1][2*k];
    }
};
