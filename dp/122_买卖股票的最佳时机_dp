// 算法思想：贪心算法，将区间股票拆成相邻股票。取其中的正值做累加
/*
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int count = 0;
        vector<int> dp(prices.size()-1);
        for (int i=0; i<prices.size()-1; i++) {
            dp[i] = prices[i+1]-prices[i];
        }
        for (int i=0; i<dp.size(); i++) {
            if (dp[i] > 0)
                count += dp[i];
        }
        return count;
    }
};*/
/*
    算法思想2：动态规划算法，保持两种状态:持有股票最大，不持有最大
              区别在于可以连续买卖
              dp[i][0] // 持有股票最大收益 dp[i][1] // 不持有股票最大收益
*/
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        vector<vector<int>> dp(prices.size(), vector<int>(2,0));
        dp[0][0] = -prices[0];
        dp[0][1] = 0;
        for (int i=1; i<prices.size(); i++) {
            // 持有最大= max(上一个持有，上一个不持有+本次买)
            dp[i][0] = max(dp[i-1][0], dp[i-1][1]-prices[i]);
            // 不持有最大 = max(上一个不持有，上一个持有+本次卖)
            dp[i][1] = max(dp[i-1][1], dp[i-1][0]+prices[i]);
        }
        return max(dp[prices.size()-1][0], dp[prices.size()-1][1]);
    }
};
