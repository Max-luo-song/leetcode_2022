/*
    算法思想：本题还是股票买卖问题，限制买卖次数为1次。用动态规划方法
    状态有5种：1.无操作 2.第一次买入 3.第一次卖出 4.第二次买入 5.第二次卖出
    根据五种状态列动态规划方程
*/
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        vector<vector<int>> dp(prices.size(), vector<int>(5, 0));
        dp[0][1] = -prices[0];
        dp[0][3] = -prices[0];
        for (int i=1; i<prices.size(); i++) {
            dp[i][0] = dp[i-1][0]; // 无操作
            dp[i][1] = max(dp[i-1][1], dp[i-1][0]-prices[i]); // 第一次买入
            dp[i][2] = max(dp[i-1][2], dp[i-1][1]+prices[i]); // 第一次卖出
            dp[i][3] = max(dp[i-1][3], dp[i-1][2]-prices[i]); // 第二次买入
            dp[i][4] = max(dp[i-1][4], dp[i-1][3]+prices[i]); // 第二次卖出
        }
        return dp[prices.size()-1][4];
    }
};
