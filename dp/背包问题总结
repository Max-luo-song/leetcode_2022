1.背包问题主要分类
1）01背包——每样只有1个
2）完全背包——相同的有无限个
2. 基本没有纯正的背包问题，都是背包问题的应用。背包问题特征从一定范围内选择几个达到xx目的
3.背包问题的分类区别就是遍历顺序，以及dp数组大小有区别
4.01背包问题模板代码(二维数组)
// 初始化
for (int i=0; i<weight.size(); i++) {
	for (int j=0; j<=bagweight; j++) { // 注意都是正序遍历
		if (j<weight[i])
			dp[i][j] = dp[i-1][j];
		else
			dp[i][j] = max(dp[i-1][j], dp[i-1][j-weight[i]]+value[i]);
	}
}
5.01背包问题模板代码(一维滚动数组)
// 初始化dp基本为0即可
for (int i=0; i<weight.size(); i++) { // 遍历物品
	for (int j=bagweight; j>=weight[i]; j--) {  // 遍历背包容量
		dp[j] = max(dp[j], dp[j-weight[i]]+value[i]);
	}
}
6.对于看出物品数组重量，看出目标背包值，但没有价值的情况。认为物品重量就是价值。如果满足总价值等于背包值就满足。详见416和1049
7.询问满足xxx条件有几种方法，如果判断出是背包问题。对于递推式要进行修改，改为：dp[j] += dp[j-num[s]]; 外层模板还是按照01滚动的来。详见494
8.对于背包大小有两个维度的问题，外层物品循环不变。内层单个for循环要变成二重for循环。模板还是不变。递推式如果是统计个数的话就是dp[i][j] = max(dp[i][j],dp[i-zeronum][j-onenum])+1;。详见474
9.多重背包模板——组合数 (一维滚动数组)：
for (int i=0; i<weight.size(); i++) { // 先物品
	for (int j=coins[i]; j<=bagWeight; j++) { // 再背包
		dp[j] = max(dp[j], dp[j-coins[i]]+value[i]);
	}
}
10. 对于求方法有多少种的，递推关系一律使用dp[j] += dp[j-nums[i]];。再加上完全背包模板，详见518
11.多重背包模板——排列数(一维滚动数组)， 详见377:
for (int j=0; j<=target; j++) { // 先背包
	for(int i=0; i<nums.size(); i++) { // 再物品
		if (j>nums[i]) {
			dp[j] = max(dp[j], dp[j-nums[i]]+value[i]);
		}
	}
}
12.注意多重背包组合和排列的区别，组合是先物品再背包，排列是先背包再物品
13.注意最小的个数状态转移式是：dp[j] = min(dp[j], dp[j-conis[i]]+1); 而且必须保证dp[j-coins[i]]有意义就是不等于初始值。详见322和279
14.有的时候物品列表没有给出，需要根据条件自己制作。详见279
15.单词拆分问题，拼装进行不太好实现。用unordered_set，只要找到所有的元件就能进行拼装。注意用法string s = s.substr(i, i-j); substr(起始位置，子串个数)。详见139
