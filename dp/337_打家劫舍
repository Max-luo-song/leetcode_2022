/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*
    算法思想1：暴力，用后序遍历，分是否打劫父节点。从里面选大的
    会超时
*/
/*
class Solution {
public:
    int rob(TreeNode* root) {
        if (root == NULL)
            return 0;
        else if (root->left == NULL && root->right == NULL)
            return root->val;
        int val1 = root->val; // 投父节点
        if (root->left) {
            val1 += rob(root->left->left) + rob(root->left->right);
        }
        if (root->right) {
            val1 += rob(root->right->left) + rob(root->right->right);
        }
        int val2 = rob(root->left) + rob(root->right);
        return max(val1, val2);
    }
};*/
/*
    算法思想：动态规划，本题是树形dp。
    对于树形dp,dp数组大小为2，分别是是否对该点接受的收益最大
    dp[0]代表不偷，dp[1]代表偷
*/
class Solution {
public:
    vector<int> robTree(TreeNode *root) {
        if (root == NULL)
            return {0,0};
        vector<int> left = robTree(root->left);
        vector<int> right = robTree(root->right);
        int t1 = root->val+left[0]+right[0];// 如果偷该节点
        int t2 = max(left[0],left[1])+max(right[0],right[1]); // 不偷该节点，要从左右子节点中选大的。是考虑偷不偷，所以选大的max
        return {t2, t1};
    }
    int rob(TreeNode* root) {
        vector<int> result = robTree(root);
        return max(result[0], result[1]);
    }
};
