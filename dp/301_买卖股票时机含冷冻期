// 状态：1.无操作 2.买入一个 3. 卖出一个 4.处于冷冻期
/*
    状态判断错误：
    1.买入股票状态 1.1昨天买入股票 1.2 今天买入股票 (取最大值)
    2.卖出股票状态——2.1 两天前卖出
    3.卖出股票状态——2.2 今天卖出(分两种情况讨论)
    4.处于冷冻期 冷冻期对应昨天卖出
    
*/
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        vector<vector<int>> dp(prices.size(), vector<int>(4,0));
        dp[0][0] = -prices[0];
        for (int i=1; i<prices.size(); i++) {
            dp[i][0] = max(dp[i-1][0], max(dp[i-1][3], dp[i-1][0])-prices[i]);
            dp[i][1] = max(dp[i-1][1], dp[i-1][3]);
            dp[i][2] = max(dp[i-1][2], dp[i-1][0]+prices[i]);
            dp[i][3] = dp[i-1][2];
        }
        int max_one = INT_MIN;
        for (int i=0; i<4; i++) {
            max_one = max(max_one, dp[prices.size()-1][i]);
        }
        return max_one;
    }
};
