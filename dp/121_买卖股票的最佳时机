// 算法思想1：暴力算法，统计任意两天的差距，寻找最大的(只可以交易一次)
/*class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int result = 0;
        for (int i=0; i<prices.size(); i++) {
            for (int j=i; j<prices.size(); j++) {
                result = max(result, prices[j]-prices[i]);
            }
        }
        return result;
    }
};*/
/* 算法思想2：贪心算法，寻找最大的，最小的做差(直观上不可以)
            必须保证最大的在最小的右边。所以用result维持当前右-左的最大值
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int result = 0;
        int min_one = INT_MAX;
        for (int i=0; i<prices.size(); i++) {
            min_one = min(prices[i], min_one);
            result = max(result, prices[i]-min_one);
        }
        return result;
    }
};*/
/*
    算法思想3：用动态规划解决，前面的状态是可买可不买，后面的状态由前面两个状态决定。所以使用dp[][0-1]
    dp[i][0]代表持有股票的最多现金
    dp[i][1]代表不持有股票的最多现金
*/
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int len = prices.size();
        if (len == 0)
            return 0;
        vector<vector<int>> dp(len, vector<int>(2));
        dp[0][0] = -prices[0];
        dp[0][1] = 0;
        for (int i=1; i<prices.size(); i++) {
            dp[i][0] = max(dp[i-1][0], -prices[i]); // 当天持有股票=前一天持有股票或者今天买股票
            dp[i][1] = max(dp[i-1][1], prices[i]+dp[i-1][0]); // 当天不持有股票=前一天不持有股票或者前天有股票但卖掉
        }
        return max(dp[len-1][0], dp[len-1][1]);
    }
};
