/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*
    算法思想：本题最好的情况就是一个摄像头覆盖三层。最大覆盖一定是叶子上没有摄像头，叶子的父亲有摄像头。
    设定三种状态：
    2 有覆盖
    1 有摄像头
    0 没有覆盖
    遍历顺序要从下往上，用后序遍历
*/
class Solution {
public:
    int result;
    int backtracking(TreeNode *root) {
        if (root == NULL) // 空节点认为有覆盖
            return 2;
        int left = backtracking(root->left);
        int right = backtracking(root->right);
        if (left == 2 && right == 2) // 左右都有覆盖，选0，让其父节点为1
            return 0;
        if (left == 0 || right == 0) { // 左右有一个没覆盖，要放摄像头
            result++;
            return 1;
        }
        if (left == 1 || right == 1) // 左右有一个为摄像头，返回覆盖状态
            return 2;
        return -1;
    }
    int minCameraCover(TreeNode* root) {
        result = 0;
        if (backtracking(root) == 0) // 特殊判断根节点，没覆盖再加一
            result++;
        return result;
    }
};
