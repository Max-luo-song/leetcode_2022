/*
    算法思想：本题和55很像，都是利用当前位置能跳到的最大范围。本题要求节点数最小。
    节点数增加的时间是当前位置是当前覆盖的最远下标时，
    会有当前和下一个最远是因为，对于当前来说，除了到最远的否则进入一个都要跳一次。不如后跳，了解情况保证下一次跳最远
*/
class Solution {
public:
    int jump(vector<int>& nums) {
        if (nums.size() == 1)
            return 0;
        int junp_num = 0;
        int cover_now = 0; // 当前覆盖最远下标
        int cover_next = 0; // 下一步覆盖最远下标
        for (int i=0; i<nums.size(); i++) {
            cover_next = max(i+nums[i], cover_next);
            if (i == cover_now) {
                if (cover_now != nums.size()-1) {
                    junp_num++;
                    cover_now = cover_next;
                    if (cover_now >= nums.size()-1)
                        break;
                }
                else
                    break;
            }
        }
        return junp_num;
    }
};
