/*
    算法思想：四数相加，秉承三数相加的双指针法。就是外面再加一个for循环。以nums[i]和nums[j]为基准，调整nums[left]和nums[right]。注意j在i右边。另外不能再第一个剪枝
*/
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> result;
        sort(nums.begin(), nums.end());
        for (int i=0; i<nums.size(); i++) {
            //if (nums[i] > target) // 当0变成任意target时，不能使用这样的剪枝了
            //    continue;
            if (i>0 && nums[i] == nums[i-1])
                continue;
            for (int j=i+1; j<nums.size(); j++) {
                //if (nums[i]+nums[j] > target)
                 //   continue;
                if (j>i+1 && nums[j] == nums[j-1])
                    continue;
                int left = j+1;
                int right = nums.size()-1;
                while (left < right) {
                    if (nums[i]+nums[j] <target-nums[left]-nums[right] )// 会溢出，不能四个相加
                        left++;
                    else if (nums[i]+nums[j] > target-nums[left]-nums[right])// 会溢出
                        right--;
                    else {
                        result.push_back(vector<int>{nums[i],nums[j],nums[left],nums[right]});
                        while (left<right && nums[left] == nums[left+1])
                            left++;
                        while (left < right && nums[right] == nums[right-1])
                            right--;
                        left++;
                        right--;
                    }
                }
            }  
        }
        return result;
    }
};
