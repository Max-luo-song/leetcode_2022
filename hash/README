1.哈希碰撞的解决办法 1）拉链法 2）线性探测法
2.set,multiset底层是红黑树，unordered_set底层是哈希表(C++11中全是哈希表) map一样
3.当遇到要快速判断一个元素是否出现在集合里的时候，就是用哈希法。用空间换时间的方法
4.当目标索引已知是有序的时候可以使用数组来存储，关键字是数组索引。详见242
5.判断多个字符串中相同的字母判断方法：为每个字符串使用hash数组存储，寻找相同字符最小值。不为0说明所有字符串都有该字符，字符最小值说明相同的字符个数。详见1002
6.当元素个数无法判断时，哈希不用数组用set。注意set的另一个特性：去重。对于不要有序的可以使用unordered_set。详见349
set的使用方法如下：
set的插入：set.insert(xxx)
set的遍历(用迭代器)：       
 set<int>::iterator it;
        for (it=t.begin(); it!=t.end(); it++) {
            ending.push_back(*it);
}
7.对于快乐数的判断方法，用unordered_set来判断当出现重复数就进入死循环了。详见202
8.多数之和整体方法
8.1 两数之和 详见1
利用map,map键使用具体值，value用索引
map插入(nums[i], i) map.find(target-nums[i])
8.2 四数相加 详见454 对于不需要去重的可以使用map 多个数组
方法：两重for循环 统计a+b所有情况及其次数，再两重for循环(统计所有c+d情况)在map中寻找0-(c+d)
8.3 三数之和 详见15 需要去重 一个数组
方法：使用双指针，对原有数组进行排序。设计cur从头到尾遍历 left=cur+1,right=end。如果大了right左移，如果小了left右移。但对于cur，left, right都需要进行去重
8.4 四数之和 详见18 需要去重 一个数组
方法：使用双指针，对原有数组进行排序。两重for循环，p1从头到尾遍历，p2=p1+1从头到尾遍历，p2+1和end作为left和right。另外需要注意的是四个加起来可能超大小，可以a+b=0-c-d
