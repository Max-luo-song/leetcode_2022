class Solution {
public:
    bool isValid(vector<vector<char>>& board, int p, int q, int k) {
        char temp = '0' + k;
        // 判断同一行
        for (int i=0; i<board.size(); i++) {
            if (board[p][i] == temp)
                return false;
        }
        for (int i=0; i<board.size(); i++) {
            if (board[i][q] == temp)
                return false;
        }
        int x = (p/3)*3;
        int y = (q/3)*3;
        for (int i=x; i<x+3; i++) {
            for (int j=y; j<y+3; j++) {
                if (board[i][j] == temp)
                    return false;
            }
        }
        return true;
    }
    // 每次从[0,0开始探索]，非数字会跳过？？？优化？从[i,j]开始
    // 本题是从树中寻找到一条满足条件的路径，用bool做返回值，遍历全树，不需要返回值
    bool backtracking(vector<vector<char>>& board) {
        for (int i=0; i<board.size(); i++) {
            for (int j=0; j<board.size(); j++) {
                if (board[i][j] == '.') {
                    for (int k=1; k<=9; k++) {
                        if (isValid(board, i, j, k)) {
                            board[i][j] = '0'+k;
                            if (backtracking(board))
                                return true;
                            board[i][j] = '.';
                        }
                    }
                    return false; // 9个数全不行
                }
            }
        }
        return true;
    }
    void solveSudoku(vector<vector<char>>& board) {
        backtracking(board);
        return ;
    }
};
