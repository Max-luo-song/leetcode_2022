/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*
    算法思想：本题递归回溯完成，需要遍历全局，所以不需要返回值。整体模板与之前相同，在最终值的处理上不同
*/
class Solution {
public:
    vector<int> temp;
    vector<vector<int>> ending;
    void traverse(TreeNode *root, int count) {
        temp.push_back(root->val); // 放在外面就要放在最前面
        if (root->left == NULL && root->right == NULL && count == 0) {    
            ending.push_back(temp);
            return ;
        }
        if (root->left == NULL && root->right == NULL)
            return ;
        if (root->left) {
            traverse(root->left, count-root->left->val);
            temp.pop_back(); // temp是全局变量，回溯要单独处理。count的传参时就处理了
        }
        if (root->right) {
            traverse(root->right, count-root->right->val);
            temp.pop_back();
        }
        return ;
    }
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        if (root == NULL)
            return ending;
        traverse(root, targetSum-root->val);
        return ending;
    }
};
