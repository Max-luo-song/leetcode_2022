/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*
    算法思想：层次遍历，当遇到左右全为NULL时退出
*/
/*
class Solution {
public:
    int minDepth(TreeNode* root) {
        if (root == NULL)
            return 0;
        queue<TreeNode *> que;
        que.push(root);
        int count = 0;
        while (!que.empty()) {
            int size = que.size();
            count++;
            while (size--) {
                TreeNode *p = que.front();
                que.pop();
                if (p->left == NULL && p->right == NULL)
                    return count;
                if (p->left != NULL)
                    que.push(p->left);
                if (p->right != NULL)
                    que.push(p->right);
            }
        }
        return 0;
    }
};*/
/*
    算法思想：递归方法，注意最小深度的定义。确定到第一个左右全为空。对于左空，存在右子树，要看右子树的最小高度+1。所以做三个判断
*/
class Solution {
public:
    int minDepth(TreeNode* root) {
        if (root == NULL) // 空返回0
            return 0;
        int left = minDepth(root->left);
        int right = minDepth(root->right);
        if (root->left == NULL && root->right != NULL) // 只有右子树
            return right+1;
        if (root->left != NULL && root->right == NULL) // 只有左子树
            return left+1;
        return min(left,right)+1;   // 左右子树都有，正常递归
    }
};
