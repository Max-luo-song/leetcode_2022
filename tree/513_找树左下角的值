/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 /*
    算法思想1：层次遍历法，对于最后一层的最左侧节点保留就可以
 */
/*
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        if (root == NULL)
            return 0;
        queue<TreeNode *> que;
        que.push(root);
        int data = 0;
        while (!que.empty()) {
            int size = que.size();
            int tag = 1;
            while (size--) { // 可以不使用tag，把while改成for，对i=0时做处理
                TreeNode *p = que.front();
                que.pop();
                if (tag == 1) {
                    data = p->val;
                    tag = 0;
                }
                if (p->left != NULL) 
                    que.push(p->left);
                if (p->right != NULL)
                    que.push(p->right);
            }
        }
        return data;
    }
};*/
/*
    算法思想：使用迭代思想，当节点为左节点并且深度最大时就是最左叶子节点。保留其值即可
    遍历全树，要回溯，且回溯返回值为void
*/

class Solution {
public:
    int maxLen = INT_MIN; // 代表叶子节点最大深度
    int maxleftValue;
    void traversal(TreeNode *root, int leftLen) {
        if (root->left == NULL && root->right == NULL) { // 返回值处理，更新最新
            if (leftLen > maxLen) {
                maxLen = leftLen;
                maxleftValue = root->val;
            }
            return ;
        }
        if (root->left) { // 此处存在回溯
            traversal(root->left, leftLen+1);
        } 
        if (root->right) {
            traversal(root->right, leftLen+1);
        }
        return ;
    }
    int findBottomLeftValue(TreeNode* root) {
        traversal(root, 0);
        return maxleftValue;
    }
};
