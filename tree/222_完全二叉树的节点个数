/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*
    算法思想：本题要确定树节点数，利用递归法，后序遍历。但没利用完全二叉树
*/
/*
class Solution {
public:
    int countNodes(TreeNode* root) {
        if (root == 0)
            return 0;
        int count_left = countNodes(root->left);
        int count_right = countNodes(root->right);
        return count_left+count_right+1;
    }
};
*/
/*
        算法思想2：利用完全二叉树。完全二叉树包含两种情况：1.满二叉树 2.不满的完全二叉树
              满二叉树利用2^n-1，完全二叉树利用左右节点数和再加一。递归完成
*/

class Solution {
public:
    int countNodes(TreeNode* root) {
        if (root == 0)
            return 0;
        TreeNode *left = root->left;
        TreeNode *right = root->right;
        int left_height = 0;
        int right_height = 0;
        while (left) { // 左子树高度
            left_height++;
            left = left->left;
        }
        while (right) { // 右子树高度
            right_height++;
            right = right->right;
        }
        // 左右相同说明是满二叉树
        if (left_height == right_height)
            return (2 << left_height)-1; // 此处2^n用左移完成，不用pow
        return countNodes(root->left)+countNodes(root->right)+1;
    }
};
