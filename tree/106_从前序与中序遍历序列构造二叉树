/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*
    算法同106：后序+中序。更换根节点位置
*/
class Solution {
public:
    TreeNode *traverse(vector<int> preorder, int pre_begin, int pre_end, vector<int> inorder, int inorder_begin, int inorder_end) {
        if (pre_end == pre_begin)
            return NULL;
        TreeNode *root = new TreeNode(preorder[pre_begin]);
        if (pre_end-pre_begin == 1)
            return root;
        int root_index;
        for (root_index=inorder_begin; root_index<inorder_end; root_index++) {
            if (inorder[root_index] == preorder[pre_begin])
                break;
        }
        int inorder_left_begin = inorder_begin;
        int inorder_left_end = root_index;
        int inorder_right_begin = root_index+1;
        int inorder_right_end = inorder_end;

        int pre_left_begin = pre_begin+1;
        int pre_left_end = pre_left_begin+inorder_left_end-inorder_left_begin;
        int pre_right_begin = pre_left_end;
        int pre_right_end = pre_end;
        TreeNode *root_left = traverse(preorder,pre_left_begin,pre_left_end,inorder,inorder_left_begin,inorder_left_end);
        TreeNode *root_right = traverse(preorder,pre_right_begin,pre_right_end,inorder,inorder_right_begin,inorder_right_end);
        root->left = root_left;
        root->right = root_right;
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if (inorder.size() == 0 || preorder.size() == 0)
            return NULL;
        return traverse(preorder, 0, preorder.size(), inorder, 0, inorder.size());
    }
};

