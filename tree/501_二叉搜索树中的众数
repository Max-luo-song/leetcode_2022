/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*
    算法思想：先根据二叉搜索树生成有序序列(这种方法不要求是二叉搜索树的)，再通过map寻找众数值，再将个数等于众数值放入结果
*/
/*
class Solution {
public:
    vector<int> temp;
    void traverse(TreeNode *root) {
        if (root != NULL) {
            traverse(root->left);
            temp.push_back(root->val);
            traverse(root->right);
        }
    }
    vector<int> findMode(TreeNode* root) {
        vector<int> ending;
        traverse(root);
        map<int,int> map1;
        for (int i=0; i<temp.size(); i++) {
            map1[temp[i]]++;
        }
        ;
        int max1 = INT_MIN;
        // 注意map<int,int>的遍历方法，利用迭代器
        for (map<int,int>::iterator it=map1.begin(); it != map1.end(); it++) {
            if (it->second > max1) // 迭代器的元素使用it->second，指针
                max1 = it->second;
        }
        for (map<int,int>::iterator it=map1.begin(); it != map1.end(); it++) {
            if (it->second == max1)
                ending.push_back(it->first);
        }
        return ending;
    }
};*/
/*
    算法思想：利用二叉搜索树特性，中序遍历+双指针，统计相同个数。因为是集合，出现更大值时要通过clear更新
*/
class Solution {
public:
    int maxcount; // 最大频率
    int count; // 统计频率
    TreeNode *pre;
    vector<int> result;
    void searchBST(TreeNode *cur) {
        if (cur == NULL)
            return ;
        searchBST(cur->left);
        if (pre == NULL) // pre为NULL说明第一个
            count = 1;
        else if (pre->val == cur->val) // 相同
            count++;
        else { // 不同说明碰到新的了
            count = 1;
        }
        pre = cur;
        if (count == maxcount)
            result.push_back(cur->val);
        if (count > maxcount) { // 超过最大值，result更新
            maxcount = count;
            result.clear();
            result.push_back(cur->val);
        }
        searchBST(cur->right);
        return ;
    }
    vector<int> findMode(TreeNode* root) {
        count = 0;
        maxcount = 0;
        pre = NULL;
        result.clear();
        searchBST(root);
        return result;
    }
};
