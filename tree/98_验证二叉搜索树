/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*
    算法思想：不能利用判断节点A和A的左右子节点判断，因为A要大于左子树所有节点，A要小于右子树所有节点。
    还是要使用中序遍历结合二叉搜索树特性判断是否有序
*/
class Solution {
public:
    vector<int> vec;
    void traverse(TreeNode *root) {
        if (root != NULL) {
            traverse(root->left);
            vec.push_back(root->val);
            traverse(root->right);
        }
    }
    bool isValidBST(TreeNode* root) {
        if (root == NULL)
            return true;
        traverse(root);
        for (int i=0; i<vec.size()-1; i++) {
            if (vec[i] >= vec[i+1])
                return false;
        }
        return true;
    }
};
