/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*
    算法思想(迭代实现)：二叉搜索树的节点插入就是搜寻到根节点根据大小进行插入。root最终会变为NULL，所以要pre指针(双指针)
*/
/*
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        if (root == NULL) // 注意特殊值的判断
            return new TreeNode(val);
        TreeNode *pre = NULL;
        TreeNode *p = root;
        while (root != NULL) {
            pre = root;
            if (root->val < val)
                root = root->right;
            else if (root->val > val)
                root = root->left;
        }
        TreeNode *new_node = new TreeNode(val);
        if (pre->val > val)
            pre->left = new_node;
        else
            pre->right = new_node;
        return p;
    }
};*/
/*
    递归实现:返回值含义是经过处理之后的左右子树
*/
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        if (root == NULL) {
            TreeNode *node = new TreeNode(val);
            return node;
        }
        if (root->val > val)
            root->left = insertIntoBST(root->left, val);
        else
            root->right = insertIntoBST(root->right, val);
        return root;
    }
};
