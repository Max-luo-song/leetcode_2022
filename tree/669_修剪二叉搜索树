/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*
    算法思想：针对于元素的删除(大的/小的)，碰到小的时把小的右子树更换小的位置，碰到大的时把大的左子树更换小的位置
*/
class Solution {
public:
    TreeNode* trimBST(TreeNode* root, int low, int high) {
        if (root == NULL)
            return NULL;
        if (root->val < low) {
            TreeNode *right = trimBST(root->right, low, high); // 寻找符合区间的点
            return right;
        }
        if (root->val > high) {
            TreeNode *left = trimBST(root->left, low, high);
            return left;            
        }
        root->left = trimBST(root->left, low, high);
        root->right = trimBST(root->right, low, high);
        return root;
    }
};
