/*
    算法思想：二叉树的层次遍历，记住代码模板
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> ending;
        if (root == NULL)
            return ending;
        queue<TreeNode *> que;
        que.push(root);
        while (!que.empty()) {
            vector<int> temp;
            int size = que.size();
            while (size--) {
                TreeNode *p = que.front();
                temp.push_back(p->val);
                que.pop();
                if (p->left)
                    que.push(p->left);
                if (p->right)
                    que.push(p->right);
            }
            ending.push_back(temp);
        }
        return ending;
    }
};
