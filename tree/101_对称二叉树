/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 /*
    算法思想1：迭代法完成，判断左右对称，使用队列为数据结构。根据对称结构，把对称的放在一起，从队列中同时取出两个就应该是对称的。其次就是插入队列顺序，为了相同要对称成对插入
 */
/*
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if (root == NULL)
            return false;
        queue<TreeNode *> que;
        que.push(root->left);
        que.push(root->right);
        while (!que.empty()) {
            // 同时取两个
            TreeNode *left = que.front();
            que.pop();
            TreeNode *right = que.front();
            que.pop();
            // 全空是正确
            if (left == NULL && right == NULL)
                continue;
            // 几种错误情况
            if ((left == NULL && right != NULL) || (left != NULL && right == NULL) || (left->val != right->val))
                return false;
            // 注意插入顺序，左左，右右，左右，右左
            que.push(left->left);
            que.push(right->right);
            que.push(left->right);
            que.push(right->left);
        }
        return true;
    }
};*/

/*
    算法思想2：递归法，按照递归三部曲，确定返回值为bool，代表是否对称。左右递归的是左右子树是否对称。返回条件，包括三种不对称情况，对称情况注意比较也是左左和右右，左右和右左
              
*/
class Solution {
public:
    bool judge(TreeNode *left, TreeNode *right) {
        if (left == NULL && right == NULL)
            return true;
        else if ((left != NULL && right == NULL) || (left == NULL && right != NULL))
            return false;
        else if (left->val != right->val)
            return false;
        else {
            bool temp1 = judge(left->left, right->right);
            bool temp2 = judge(left->right, right->left);
            return temp1 && temp2;
        }
    }
    bool isSymmetric(TreeNode* root) {
        if (root == NULL)
            return true;
        return judge(root->left, root->right);
    }
};
